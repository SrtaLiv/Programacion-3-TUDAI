Index: src/main/java/practico4/GrafoDirigidoHASH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package practico4;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\n\r\n//puedo hacer los get y set de mis vertices?\r\npublic class GrafoDirigidoHASH<T> implements Grafo<T> {\r\n    private HashMap<Integer, HashSet<Arco<T>>> vertices;\r\n    public GrafoDirigidoHASH(){\r\n        this.vertices = new HashMap<>();\r\n    }\r\n\r\n    @Override\r\n    public void agregarVertice(int verticeId) {\r\n        this.vertices.put(verticeId, new HashSet<>());\r\n    }\r\n\r\n    @Override\r\n    public void borrarVertice(int verticeId) {\r\n        this.vertices.remove(verticeId);\r\n    }\r\n\r\n    @Override\r\n    public void agregarArco(int verticeId1, int verticeId2, T etiqueta) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void borrarArco(int verticeId1, int verticeId2) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean contieneVertice(int verticeId) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean existeArco(int verticeId1, int verticeId2) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public Arco<T> obtenerArco(int verticeId1, int verticeId2) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public int cantidadVertices() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int cantidadArcos() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public Iterator<Integer> obtenerVertices() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Iterator<Integer> obtenerAdyacentes(int verticeId) {\r\n        Iterator<Arco<T>> arcoIterator = this.obtenerArcos(verticeId);\r\n\r\n        if (this.vertices.containsKey(verticeId)){\r\n            HashSet<Integer> verticesAdyacentes = new HashSet<>();\r\n            while (obtenerArcos().hasNext()){\r\n                verticesAdyacentes.add(obtenerArcos().next().getVerticeDestino());\r\n\r\n                return verticesAdyacentes.iterator();\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Iterator<Arco<T>> obtenerArcos() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Iterator<Arco<T>> obtenerArcos(int verticeId) {\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/practico4/GrafoDirigidoHASH.java b/src/main/java/practico4/GrafoDirigidoHASH.java
--- a/src/main/java/practico4/GrafoDirigidoHASH.java	
+++ b/src/main/java/practico4/GrafoDirigidoHASH.java	
@@ -14,7 +14,9 @@
 
     @Override
     public void agregarVertice(int verticeId) {
-        this.vertices.put(verticeId, new HashSet<>());
+        if (!this.vertices.containsKey(verticeId)){ //Si no cintiene la clave..
+            this.vertices.put(verticeId, new HashSet<>());
+        }
     }
 
     @Override
@@ -64,17 +66,7 @@
 
     @Override
     public Iterator<Integer> obtenerAdyacentes(int verticeId) {
-        Iterator<Arco<T>> arcoIterator = this.obtenerArcos(verticeId);
-
-        if (this.vertices.containsKey(verticeId)){
-            HashSet<Integer> verticesAdyacentes = new HashSet<>();
-            while (obtenerArcos().hasNext()){
-                verticesAdyacentes.add(obtenerArcos().next().getVerticeDestino());
-
-                return verticesAdyacentes.iterator();
-            }
-            return null;
-        }
+        return null;
     }
 
     @Override
